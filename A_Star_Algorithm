# please install the !pip install pyamaze library
from pyamaze import maze, agent , textLabel
# this is priority Queue so the sortest cost will be in the top
from queue import PriorityQueue
import tkinter as tk
#define a manhattan distance = |x1-x2|+|y1-y2|
def h(cell1,cell2):
 x1,y1=cell1
 x2,y2=cell2
 return abs(x1-x2) + abs(y1-y2)
#make a star algorithm maze using pyamaze library
def astar(m):
 start = (m.rows,m.cols)
 g_score = {cell:float('inf') for cell in m.grid}
 g_score[start] = 0
 f_score = {cell:float('inf') for cell in m.grid}
 f_score[start] = h(start,(1,1))

 #define a priorityQuese as 'open'
 open = PriorityQueue()
 #put the value to the Queue
 open.put((h(start, (1,1)),h(start,(1,1)),start))

 apath={} #make a dictionary for path

 #untill 'open' queue is not empty , the operation will perform
 while not open.empty():
 #current node
 currcell = open.get()[2]
 if currcell == (1,1):
 break
 # ESNW represents the directions East, South, North, West.
 for d in 'ESNW':
 if m.maze_map[currcell][d] == True:
 if d =='E':
 childcell = (currcell[0],currcell[1]+1)
 if d =='W':
 childcell = (currcell[0],currcell[1]-1)
 if d =='N':
 childcell = (currcell[0]-1,currcell[1])
 if d =='S':
 childcell = (currcell[0]+1,currcell[1])

 #calculation the score of f(n) = h(n)+g(n)
 temp_g_score = g_score[currcell]+1
 temp_f_score = temp_g_score + h(childcell,(1,1))

 if temp_f_score < f_score[childcell]:
 g_score[childcell] = temp_g_score
 f_score[childcell] = temp_f_score
 open.put((temp_f_score,h(childcell,(1,1)),childcell))
 apath[childcell] = currcell
 fwdpath={}
 cell = (1,1)
 while cell != start:
 fwdpath[apath[cell]] = cell
 cell = apath[cell]
 return fwdpath
if __name__ == '__main__':
 # Create a 10x10 maze
 m = maze(10,10)
 m.CreateMaze()
 path = astar(m)
 a = agent(m,footprints=True,shape='arrow')
 # a = agent()
 m.tracePath({a:path})
 l=textLabel(m, 'A Star Algorithm', len(path)+1)
 usama = textLabel(m, 'USAMA-kHAN 5th-AI', 126)
 m.run()


maze_map = {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (2, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (3, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1},
(4, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (5, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (1, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 2): {'E': 0,
'W': 1, 'N': 1, 'S': 0}, (3, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (5, 2): {'E': 1, 'W': 1, 'N': 0,
'S': 0}, (1, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (3, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (4, 3):
{'E': 1, 'W': 0, 'N': 0, 'S': 1}, (5, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (1, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 4): {'E': 0, 'W': 1,
'N': 0, 'S': 1}, (3, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (5, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 0},
(1, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 5): {'E': 0,
'W': 0, 'N': 1, 'S': 1}, (5, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}
grid = [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (1, 4), (2,
4), (3, 4), (4, 4), (5, 4), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5)]
 # print(grid)

def create_window():
 # Create the main window
 window = tk.Tk()
 window.title("Message Display")
 window.geometry("800x400") # Set the size of the window

 # Create and configure labels
 name_label = tk.Label(window, text="USAMA KHAN", font=("Arial", 36), fg="Blue")
 name_label.pack(pady=20) # Add some vertical spacing
 ai_label = tk.Label(window, text="AI 5th", font=("Arial", 27), fg="SkyBlue")
 ai_label.pack(pady=20)
 thanks_label = tk.Label(window, text="Thanks to dear Dr. Amir Akbar, we are very
grateful for all that you have taught us.",
 font=("Arial", 18), fg="Brown", wraplength=750, justify="center")
 thanks_label.pack(pady=30)
 # Run the application
 window.mainloop()
# Call the function to create the window
create_window()
